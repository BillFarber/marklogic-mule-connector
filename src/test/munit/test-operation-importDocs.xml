<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:marklogic="http://www.mulesoft.org/schema/mule/marklogic" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
                        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
                        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
                        http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
                        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
                        http://www.mulesoft.org/schema/mule/marklogic http://www.mulesoft.org/schema/mule/marklogic/current/mule-marklogic.xsd">
    <munit:config name="importDocs Suite" minMuleVersion="4.2.0" />
    <configuration-properties file="automation-credentials.properties"/>
    <marklogic:config name="importDocsConfig" configId="importDocsConfig" threadCount="4" batchSize="100" secondsBeforeFlush="2" jobName="importDocsJob">
        <marklogic:connection connectionId="importDocsConfig"  hostname="${config.hostName}" port="8010" username="${config.username}" password="${config.password}" authenticationType="digest" />
    </marklogic:config>
    <!--<marklogic:config name="importDocsTransformConfig" configId="importDocsTransformConfig" threadCount="4" batchSize="100" serverTransform="ml:sjsInputFlow" serverTransformParams="entity-name,Employees,flow-name,loadEmployees" secondsBeforeFlush="2" jobName="importDocsTransformJobName" >
        <marklogic:connection connectionId="importDocsTransformConfig"  hostname="${config.hostName}" port="8010" username="${config.username}" password="${config.password}" authenticationType="digest" />
    </marklogic:config>-->
    <flow name="importDocsFlow">
        <set-payload value="[0, null, false, &quot;blah&quot;, &quot;20&quot;, [], {}]"/>
        <marklogic:import-docs config-ref="importDocsConfig" outputCollections="mulesoft-dmsdk-test,test" outputPermissions="rest-reader,read,rest-writer,update" outputQuality="2" outputUriPrefix="/mulesoft/" outputUriSuffix=".json" generateOutputUriBasename="false" basenameUri="test-importDocs-munit" serverTransform="ml:sjsInputFlow" serverTransformParams="entity-name,Employees,flow-name,loadEmployees"/>
        <set-payload value="#[%dw 2.0 output application/json &#x002D;&#x002D;&#x002D; payload]"/>
    </flow>
    <!-- <flow name="importDocsBinaryFlow">
        <marklogic:export-docs config-ref="importDocsConfig" queryStrategy="RawStructuredQueryDefinition" fmt="XML">
            <marklogic:query-string>
                &lt;query xmlns=&quot;http://marklogic.com/appservices/search&quot;&gt;
                    &lt;document-query&gt;
                        &lt;uri&gt;/test/jsonschema.png&lt;/uri&gt;
                    &lt;/document-query&gt;
                &lt;/query&gt;
            </marklogic:query-string>
        </marklogic:export-docs>
        <set-payload value="#[%dw 2.0 output application/octet-stream &#x002D;&#x002D;&#x002D; payload[0]]"/>
    </flow>
    <flow name="importDocsTextFlow">
        <marklogic:export-docs config-ref="importDocsConfig" queryStrategy="RawStructuredQueryDefinition" fmt="XML">
            <marklogic:query-string>
                &lt;query xmlns=&quot;http://marklogic.com/appservices/search&quot;&gt;
                    &lt;document-query&gt;
                        &lt;uri&gt;/test/helloworld.txt&lt;/uri&gt;
                    &lt;/document-query&gt;
                &lt;/query&gt;
            </marklogic:query-string>
        </marklogic:export-docs>
        <set-payload value="#[%dw 2.0 output application/json &#x002D;&#x002D;&#x002D; payload[0]]"/>
    </flow>
    <flow name="importDocsJSONFlow">
        <marklogic:export-docs config-ref="importDocsConfig" queryStrategy="RawStructuredQueryDefinition" fmt="XML">
            <marklogic:query-string>
                &lt;query xmlns=&quot;http://marklogic.com/appservices/search&quot;&gt;
                    &lt;document-query&gt;
                        &lt;uri&gt;/test/doc1.json&lt;/uri&gt;
                    &lt;/document-query&gt;
                &lt;/query&gt;
            </marklogic:query-string>
        </marklogic:export-docs>
        <set-payload value="#[%dw 2.0 output application/json &#x002D;&#x002D;&#x002D; payload[0]]"/>
    </flow>
    <flow name="importDocsXMLFlow">
        <marklogic:export-docs config-ref="importDocsConfig" queryStrategy="RawStructuredQueryDefinition" fmt="XML">
            <marklogic:query-string>
                &lt;query xmlns=&quot;http://marklogic.com/appservices/search&quot;&gt;
                    &lt;document-query&gt;
                        &lt;uri&gt;/test/helloworld.xml&lt;/uri&gt;
                    &lt;/document-query&gt;
                &lt;/query&gt;
            </marklogic:query-string>
        </marklogic:export-docs>
        <set-payload value="#[%dw 2.0 output application/xml ns sem http://marklogic.com/semantics &#x002D;&#x002D;&#x002D; read(payload[0], 'application/xml')]"/>
    </flow> -->
    <munit:test name="importDocsNonTransformTest" description="importDocs Non-Transform Results">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsFlow"/>
        </munit:execution>
        <munit:validation>
            <!-- The JobID returned should use hexadecimal string output -->
            <munit-tools:assert-that expression="#[payload matches /[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}/]" is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>
    <!-- <munit:test name="importDocsCheckEmpNoTest" description="importDocs Check Employee Number Test">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsFlow"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload[0].envelope.instance.employee.empNo >= 10000]" is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>
    <munit:test name="importDocsCheckBinaryMimetype" description="importDocs Check Binary Mimetype">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsBinaryFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsBinaryFlow"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::withMediaType('application/octet-stream')]"/>
        </munit:validation>
    </munit:test>
    <munit:test name="importDocsCheckTextMimetype" description="importDocs Check Text Mimetype">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsTextFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsTextFlow"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('Hello world')]"/>
        </munit:validation>
    </munit:test>
    <munit:test name="importDocsCheckJSONMimetype" description="importDocs Check JSON Mimetype">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsJSONFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsJSONFlow"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload.emp_no]" is="#[MunitTools::equalTo('0001')]"/>
        </munit:validation>
    </munit:test>
    <munit:test name="importDocsCheckXMLMimetype" description="importDocs Check XML Mimetype">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="importDocsXMLFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <flow-ref name="importDocsXMLFlow"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[%dw 2.0 output application/xml &#x002D;&#x002D;&#x002D; payload]" is="#[MunitTools::withMediaType('application/xml')]"/>
            <munit-tools:assert-that expression="#[%dw 2.0 output text/plain &#x002D;&#x002D;&#x002D; payload.envelope.test]" is="#[MunitTools::equalTo('Hello world')]"/>
        </munit:validation>
    </munit:test> -->
</mule>